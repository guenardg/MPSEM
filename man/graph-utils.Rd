% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/graph-utils.R
\name{graph-utils}
\alias{graph-utils}
\alias{getOrigin}
\alias{getConnected}
\alias{getNonConnected}
\alias{getTerminal}
\alias{getMedian}
\alias{isTree}
\alias{isDivergent}
\alias{isLinear}
\alias{graphDist}
\alias{reorderGraph}
\title{Graph Utility Functions}
\usage{
getOrigin(x)

getConnected(x)

getNonConnected(x)

getTerminal(x)

getMedian(x)

isTree(x)

isDivergent(x)

isLinear(x)

graphDist(
  x,
  ...,
  mean = c("arithmetic", "geometric", "harmonic"),
  weighting = invDistWeighting
)

reorderGraph(x, order, shuffleEdge = FALSE)
}
\arguments{
\item{x}{A \code{\link{graph-class}} object.}

\item{...}{Further argument(s) to be passed to the weighting function
described below.}

\item{mean}{One of character strings \code{"arithmetic"}, \code{"geometric"},
\code{"harmonic"}, or any unambiguous abbreviation thereof, specifying the
type of mean used for averaging the distances when a vertex has multiple
ascendent edges.}

\item{weighting}{A weighting function; it takes a set of distances as its
first argument and returns a set of weights summing to \code{1} (default:
\code{\link{invDistWeighting}}).}

\item{order}{An integer vector of the vertex indices.}

\item{shuffleEdge}{A Boolean. Whether to randomly shuffle the order that the
edges are stored in the \code{\link{graph-class}} object (\code{FALSE}).}
}
\value{
\describe{
\item{getOrigin}{A vector of integer.}
\item{getConnected}{A vector of integer.}
\item{getNonConnected}{A vector of integer.}
\item{getTerminal}{A vector of integer.}
\item{getMedian}{A vector of integer.}
\item{isTree}{A \code{logical} stipulating whether the graph is a tree.}
\item{isDivergent}{A \code{logical} stipulating whether the graph has
divergence.}
\item{isLinear}{A \code{logical} stipulating whether the graph is a linear
sequence of vertices.}
\item{graphDist}{A pairwise distance matrix such as the one obtained from
function \code{\link[stats]{dist}}.}
}
}
\description{
A suite of graph utility functions.
}
\details{
A origin vertex is one having only outgoing edge(s) and no incoming
edge, whereas a terminal vertex is one having only incoming edge(s) and no
outgoing edge. A median vertex has one incoming edge and one outgoing edge. A
non-connected vertex has no edge, whereas a connected vertex may have
incoming edge(s), outgoing edge(s), or both.

Reordering a graph with a \code{processOrder} attribute will come with a
recalculation of the process order, whereas doing so on a graph with a
\code{dist} attribute cause the pairwise distance matrix to also be
reordered.
}
\section{Functions}{
\itemize{
\item \code{getOrigin()}: Get Origin Vertex

Obtain the origin vert(ex/ices) of a directed graph; an origin vertex is one
with no incoming edge.

\item \code{getConnected()}: Get Connected Vertex

Obtain the connected vert(ex/ices) of a graph.

\item \code{getNonConnected()}: Get Non-connected Vertex

Obtain the non-connected connected vert(ex/ices) of a graph.

\item \code{getTerminal()}: Get Terminal Vertex

Obtain the terminal vert(ex/ices) of a directed graph; a terminal vertex is
one with no outgoing edge.

\item \code{getMedian()}: Get Terminal Vertex

Obtain the median vert(ex/ices) of a directed graph; a median vertex is one
with one incoming edge and one outgoing edge.

\item \code{isTree()}: Tree Test

Testing whether the graph is a tree.

\item \code{isDivergent()}: Divergence Test

Testing whether the graph has divergence.

\item \code{isLinear()}: Linearity Test

Testing whether the graph is a linear sequence.

\item \code{graphDist()}: Graph Distance Matrix

Obtain a matrix of the (average) graph distance among the vertices.

\item \code{reorderGraph()}: Reorder Vertices

Reorder the vertices of a directed graph.

}}
\examples{
## Create and example graph with 10 vertices and 16 edges:
data.frame(
  species = rep(TRUE,10),
  x = c(2,3,2,4,3,4,2,1,1,0),
  y = c(-2,1,2,0,-0.5,-2,0,-1,1,0),
  row.names = sprintf("V\%d",1:10)
) \%>\%
graph \%>\%
add.edge(
  from = c(10,10,9,9,8,8,3,7,7,10,2,2,5,1,4,5),
  to = c(9,8,3,7,7,1,2,2,5,2,1,4,4,4,6,6),
  data = data.frame(
    distance = c(1,1,1,1,1,1,1,1,1,4,2,1,1,3,1,1),
    row.names = sprintf("E\%d",1:16)
  )
) -> x

getOrigin(x)         ## The graph has a single origin vertex.
getConnected(x)      ## All the vertices
getNonConnected(x)   ## are connected.
getTerminal(x)       ## The graph has a single terminal vertex.
getMedian(x)         ## The graph has a single median vertex.
isTree(x)            ## The graph is not a tree.
isDivergent(x)       ## The graoh has divergences.
isLinear(x)          ## The graph is not a linear vertex sequence.

## The average pairwise distances between the vertices:
graphDist(x)

## Reordering of the vertices:
xr <- reorderGraph(x, order=c(5:1,8,6,7,10,9))
xr

getOrigin(xr)     ## Same origin vertex, but at a different index.
getTerminal(xr)   ## Same terminal vertex, but at a different index.
graphDist(xr)     ## Same distances, but in a different order.

## Comparison between distances obtained using various means and weighting
## parameter:
cmpr <- function(x, y) 200*(x - y)/(x + y)

cmpr(graphDist(x), graphDist(x, mean="geo"))
cmpr(graphDist(x), graphDist(x, mean="har"))
cmpr(graphDist(x), graphDist(x, mean="ari", a=1))
cmpr(graphDist(x), graphDist(x, mean="geo", a=1))
cmpr(graphDist(x), graphDist(x, mean="har", a=1))
cmpr(graphDist(x), graphDist(x, mean="ari", a=2))
cmpr(graphDist(x), graphDist(x, mean="geo", a=2))
cmpr(graphDist(x), graphDist(x, mean="har", a=2))


}
\seealso{
\code{\link{graph-class}}.
}
\author{
\packageAuthor{MPSEM}
Maintainer: \packageMaintainer{MPSEM}
}
